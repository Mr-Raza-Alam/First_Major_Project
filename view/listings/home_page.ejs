<!-- home page -->
 <!-- </% layout("/layouts/boilierPlate") -%> -->

 <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Accept coordinates as input to a geocoder</title>
<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
<link href="https://api.mapbox.com/mapbox-gl-js/v3.12.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v3.12.0/mapbox-gl.js"></script>
<style>
body { margin: 0; padding: 0; }
#map { height: 40rem; width: 80rem; border: 3px solid; border-radius: 5px; transform: translate(4rem,5rem);}
</style>
</head>
<body>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.3/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.3/mapbox-gl-geocoder.css" type="text/css">

 <div class="row mt-4">    
    <div class="col-4 offset-3">
        <h3>Welcome to WunderLust World.</h3>
     <a href="/listings/back" class="btn btn-secondary">&lt;&lt;Back to page</a>
    </div>
 </div>
<div id="map"></div>

<script>
   //'pk.eyJ1IjoicmF6YS1iMzAiLCJhIjoiY21icnFzdHhnMGdseDJrcXhjcnhudmdldyJ9.LI9BvgpTtsr77wY50uOo6w';
	mapboxgl.accessToken = "<%= process.env.MAP_TOKEN %>";
    const map = new mapboxgl.Map({
        container: 'map',
        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/mapbox/standard',
        center: [92.7900, 24.7500],
        zoom: 8
    });

    /* Given a query in the form "lng, lat" or "lat, lng"
     * returns the matching geographic coordinate(s)
     * as search results in carmen geojson format,
     * https://github.com/mapbox/carmen/blob/master/carmen-geojson.md */
    const coordinatesGeocoder = function (query) {
        // Match anything which looks like
        // decimal degrees coordinate pair.
        const matches = query.match(
            /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
        );
        if (!matches) {
            return null;
        }

        function coordinateFeature(lng, lat) {
            return {
                center: [lng, lat],
                geometry: {
                    type: 'Point',
                    coordinates: [lng, lat]
                },
                place_name: 'Lat: ' + lat + ' Lng: ' + lng,
                place_type: ['coordinate'],
                properties: {},
                type: 'Feature'
            };
        }

        const coord1 = Number(matches[1]);
        const coord2 = Number(matches[2]);
        const geocodes = [];

        if (coord1 < -90 || coord1 > 90) {
            // must be lng, lat
            geocodes.push(coordinateFeature(coord1, coord2));
        }

        if (coord2 < -90 || coord2 > 90) {
            // must be lat, lng
            geocodes.push(coordinateFeature(coord2, coord1));
        }

        if (geocodes.length === 0) {
            // else could be either lng, lat or lat, lng
            geocodes.push(coordinateFeature(coord1, coord2));
            geocodes.push(coordinateFeature(coord2, coord1));
        }

        return geocodes;
    };

    // Add the control to the map.
    map.addControl(
        new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            localGeocoder: coordinatesGeocoder,
            zoom: 4,
            placeholder: 'Try: -40, 170',
            mapboxgl: mapboxgl,
            reverseGeocode: true
        })
    );
       const marker = new mapboxgl.Marker({color : "red",})
        .setLngLat([92.7900, 24.7500])// listing.geometry.coordinates
        .setPopup(new mapboxgl.Popup({offset: 25})//, className: 'my-class' so setPopum is funct.name
        .setHTML(``)
        .setMaxWidth("300px"))
        .addTo(map);
</script>

</body>
</html>

